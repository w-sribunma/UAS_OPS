{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UAS Operation Documentations This page serves to documents related educational materials for UAS operations and researches on UAS.","title":"Home"},{"location":"#uas-operation-documentations","text":"This page serves to documents related educational materials for UAS operations and researches on UAS.","title":"UAS Operation Documentations"},{"location":"FAA-Part107/","text":"UAS Operations under part 107 Remote Pilot License FAA Part 107: Small Unmanned Aircraft Systems Part 107 is an FAA-certified remote pilot license that allows operators to operate drones for non-recreational purposes, including some funded research purposes. For more information: FAA Commercial Operators Required for any drone operation for non-recreational purposes Recreational Flight Definition: FAA Recreational Flyers Brief Video Explanation Overview The following are a few main categories to familiarize yourself with the operational requirements to fly in United States airspaces especially those near the Purdue University campus, which is located under a class D airport (Purdue University airport). This document only briefly covers a basic overview of the operating procedures. Please refer to the official FAR/AIM regulation for detailed legal requirements. All UAS non-recreational UAS operations must be flown under the FAA Part 107 rules. Aircraft must fly in \"Class G\" airspace at all time unless received additional air traffic authorization. Remote Pilot-in-command (PIC) Responsible for and is the final authority for all operations Must ensure all UAS operation complies with all application regulations PIC is required to be in \u201cdirect supervision\u201d of any operators and has the ability to immediately take direct control of the UAS All operations must remain in Visual line-of-sight (VLOS) VLOS can be done through Visual observer with means of effective communication to PIC PIC Restriction No alcohol within 8 hours Cannot have a blood alcohol concentration of 0.04 or greater Visual Observer Must maintain effective communication with PIC at all times Purpose Scan airspace for potential collision hazard Maintain awareness of UAS Unmanned Aircraft Systems (UAS) Small unmanned aircraft systems (sUAS) are drones weighing less than 55 lbs at all time. Generally, No UAS Operations over human (Refer to FAR/AIM 107.100 ) No exposed parts that would lacerate human skin upon impact with human No operations over open-air assemblies of human beings Drone operating under part 107 outdoors must be registered with the FAA FAA DroneZone The registration number must be labeled visibly on the vehicle Registration Certificate must be in the pilot\u2019s possession during operation The registration number must be written visibly on the UAS Operating Condition Remain in visual-line-of-sight (VLOS) Cannot operate over a congested area Crewed aircraft ALWAYS have the right-of-way Night Operations UAS must equipped with anti-collision lighting visible at least 3 statute miles If operated near airports or congested areas, thoroughly check the allowed airspace and safety requirements Flight Operation procedures and requirements PIC must perform a preflight inspection to sUAS Must ensure the flight will not pose a hazard to others Must not operate UAS carelessly In-flight emergency PIC can deviate from any rule to accommodate the specific emergency Must report if a deviation occurs Reporting Accidents Accidents must be reported within 10 calendar days if Serious injury to a person occurs Any loss of consciousness Damage to any property exceeding $500 for cost of repair Damage to any fair market value of property exceeding $500","title":"FAA Part 107"},{"location":"FAA-Part107/#uas-operations-under-part-107-remote-pilot-license","text":"FAA Part 107: Small Unmanned Aircraft Systems Part 107 is an FAA-certified remote pilot license that allows operators to operate drones for non-recreational purposes, including some funded research purposes. For more information: FAA Commercial Operators Required for any drone operation for non-recreational purposes Recreational Flight Definition: FAA Recreational Flyers Brief Video Explanation","title":"UAS Operations under part 107 Remote Pilot License"},{"location":"FAA-Part107/#overview","text":"The following are a few main categories to familiarize yourself with the operational requirements to fly in United States airspaces especially those near the Purdue University campus, which is located under a class D airport (Purdue University airport). This document only briefly covers a basic overview of the operating procedures. Please refer to the official FAR/AIM regulation for detailed legal requirements. All UAS non-recreational UAS operations must be flown under the FAA Part 107 rules. Aircraft must fly in \"Class G\" airspace at all time unless received additional air traffic authorization.","title":"Overview"},{"location":"FAA-Part107/#remote-pilot-in-command-pic","text":"Responsible for and is the final authority for all operations Must ensure all UAS operation complies with all application regulations PIC is required to be in \u201cdirect supervision\u201d of any operators and has the ability to immediately take direct control of the UAS All operations must remain in Visual line-of-sight (VLOS) VLOS can be done through Visual observer with means of effective communication to PIC PIC Restriction No alcohol within 8 hours Cannot have a blood alcohol concentration of 0.04 or greater","title":"Remote Pilot-in-command (PIC)"},{"location":"FAA-Part107/#visual-observer","text":"Must maintain effective communication with PIC at all times Purpose Scan airspace for potential collision hazard Maintain awareness of UAS","title":"Visual Observer"},{"location":"FAA-Part107/#unmanned-aircraft-systems-uas","text":"Small unmanned aircraft systems (sUAS) are drones weighing less than 55 lbs at all time. Generally, No UAS Operations over human (Refer to FAR/AIM 107.100 ) No exposed parts that would lacerate human skin upon impact with human No operations over open-air assemblies of human beings Drone operating under part 107 outdoors must be registered with the FAA FAA DroneZone The registration number must be labeled visibly on the vehicle Registration Certificate must be in the pilot\u2019s possession during operation The registration number must be written visibly on the UAS","title":"Unmanned Aircraft Systems (UAS)"},{"location":"FAA-Part107/#operating-condition","text":"Remain in visual-line-of-sight (VLOS) Cannot operate over a congested area Crewed aircraft ALWAYS have the right-of-way Night Operations UAS must equipped with anti-collision lighting visible at least 3 statute miles If operated near airports or congested areas, thoroughly check the allowed airspace and safety requirements","title":"Operating Condition"},{"location":"FAA-Part107/#flight-operation-procedures-and-requirements","text":"PIC must perform a preflight inspection to sUAS Must ensure the flight will not pose a hazard to others Must not operate UAS carelessly In-flight emergency PIC can deviate from any rule to accommodate the specific emergency Must report if a deviation occurs","title":"Flight Operation procedures and requirements"},{"location":"FAA-Part107/#reporting-accidents","text":"Accidents must be reported within 10 calendar days if Serious injury to a person occurs Any loss of consciousness Damage to any property exceeding $500 for cost of repair Damage to any fair market value of property exceeding $500","title":"Reporting Accidents"},{"location":"X500-model/","text":"Holybro X500 Model Custom Build with Raspberry Pi Onboard computer For the IEEE Drone Maze 2024 competition to be proposed to host at ICRA 2024 in Yokohama, Japan, Purdue University team proposes a custom-improved model for the Holybro X500 model. We have deviated from the previous year's PX4Vision drone due to the discontinuation of the development kit by Holybro. Holybro X500 Holybro's X500 quadrotor frame provides sufficient stability along with the capacity to carry neccessary onboard sensors. Vehicle Specification: Wheelbase: 500mm Motor mount pattern: 16x16mm Frame Body: 144x144mm, 2mm thick Landing gear height: 215 mm Space between top and bottom plates: 28mm Weight: 610g Note: Battery we plan to use is 4S 4000mAh 30C Lipo Battery Pixhawk RPi CM4 Baseboard and On-board Computer For the Flight Controller board, the Pixhawk RPi CM4 Baseboard with the Pixhawk 6X FC Module option will be used to allow an onboard flight computer with the Raspberry Pi Compute Module 4 . This UAS model will have the onboard computing capability from the Raspberry Pi along with the addition Google Cloral to aid the computational power for use in future computations of navigation, Computer Vision, and other computationally inefficient processes. 2D Lidar Sensor For distance and awareness data, a 2D 360 degrees Lidar will be equipped onboard the X500 frame.","title":"X500 Build Parts"},{"location":"X500-model/#holybro-x500-model-custom-build-with-raspberry-pi-onboard-computer","text":"For the IEEE Drone Maze 2024 competition to be proposed to host at ICRA 2024 in Yokohama, Japan, Purdue University team proposes a custom-improved model for the Holybro X500 model. We have deviated from the previous year's PX4Vision drone due to the discontinuation of the development kit by Holybro.","title":"Holybro X500 Model Custom Build with Raspberry Pi Onboard computer"},{"location":"X500-model/#holybro-x500","text":"Holybro's X500 quadrotor frame provides sufficient stability along with the capacity to carry neccessary onboard sensors. Vehicle Specification: Wheelbase: 500mm Motor mount pattern: 16x16mm Frame Body: 144x144mm, 2mm thick Landing gear height: 215 mm Space between top and bottom plates: 28mm Weight: 610g Note: Battery we plan to use is 4S 4000mAh 30C Lipo Battery","title":"Holybro X500"},{"location":"X500-model/#pixhawk-rpi-cm4-baseboard-and-on-board-computer","text":"For the Flight Controller board, the Pixhawk RPi CM4 Baseboard with the Pixhawk 6X FC Module option will be used to allow an onboard flight computer with the Raspberry Pi Compute Module 4 . This UAS model will have the onboard computing capability from the Raspberry Pi along with the addition Google Cloral to aid the computational power for use in future computations of navigation, Computer Vision, and other computationally inefficient processes.","title":"Pixhawk RPi CM4 Baseboard and On-board Computer"},{"location":"X500-model/#2d-lidar-sensor","text":"For distance and awareness data, a 2D 360 degrees Lidar will be equipped onboard the X500 frame.","title":"2D Lidar Sensor"},{"location":"hardware/","text":"Drone Hardwares This section will discuss some main hardware required for drone building and RC UAS operational components. Flight Controller (FC) Flight controller (often called FC) is an essential component for any UAS aircraft, consisting of internal sensors required for UAS's detection of its orientation and movements in space. The FC is the center of all UAS computations and communications between its components and any ground control station connecting to the UAS, allowing processing of critical mission parameters and connected sensors. Some of the common sensors onboard the FC includes: Accelerometers Provide an instantaneous acceleration data for the drone's motion Gyroscopic sensor A gyro sensor works to provide rotational motion awareness for the UAS Barometer Utilizes atmospheric pressure to determine altitude Magnetometer Obtain magnetic heading and compass data Note that most FC may contain multiple of the same sensors for redundency. Power Module Power Modules are what connects a battery to the Flight Controllers, Motors, or some other components. It has an internal voltage regularator, ensuring that a constant 5V power can be used to power an applicable FC. Prior to selecting power module, we suggest checking the specification of your UAS components to ensure compatibility and sufficient power outputs. RC Receivers (RX) Receivers are crucial for any RC operations and safety measures. Receivers are what will communicate with an RC transmitter to allow manual command inputs from Pilot to the UAS. We recommend all UAS operations to have a manual RC overrides and kill switch set up for safety. The receivers are directly connected to the FC, communicating with the UAS through different transmission protocals Transmitter (TX) Transmitters are remote controllers that remotely communicate with the receivers to provide inputs for the UAS. Telemetry Radios Telemetry radios transmit messages among the UAS to its respective Ground Control Station (GCS) the GCS can receive messages such as attitude, altitude, GPS data, and speed. This is useful when performing outdoor UAS operations where flight data can be read by ground pilots.","title":"Components"},{"location":"hardware/#drone-hardwares","text":"This section will discuss some main hardware required for drone building and RC UAS operational components.","title":"Drone Hardwares"},{"location":"hardware/#flight-controller-fc","text":"Flight controller (often called FC) is an essential component for any UAS aircraft, consisting of internal sensors required for UAS's detection of its orientation and movements in space. The FC is the center of all UAS computations and communications between its components and any ground control station connecting to the UAS, allowing processing of critical mission parameters and connected sensors. Some of the common sensors onboard the FC includes: Accelerometers Provide an instantaneous acceleration data for the drone's motion Gyroscopic sensor A gyro sensor works to provide rotational motion awareness for the UAS Barometer Utilizes atmospheric pressure to determine altitude Magnetometer Obtain magnetic heading and compass data Note that most FC may contain multiple of the same sensors for redundency.","title":"Flight Controller (FC)"},{"location":"hardware/#power-module","text":"Power Modules are what connects a battery to the Flight Controllers, Motors, or some other components. It has an internal voltage regularator, ensuring that a constant 5V power can be used to power an applicable FC. Prior to selecting power module, we suggest checking the specification of your UAS components to ensure compatibility and sufficient power outputs.","title":"Power Module"},{"location":"hardware/#rc-receivers-rx","text":"Receivers are crucial for any RC operations and safety measures. Receivers are what will communicate with an RC transmitter to allow manual command inputs from Pilot to the UAS. We recommend all UAS operations to have a manual RC overrides and kill switch set up for safety. The receivers are directly connected to the FC, communicating with the UAS through different transmission protocals","title":"RC Receivers (RX)"},{"location":"hardware/#transmitter-tx","text":"Transmitters are remote controllers that remotely communicate with the receivers to provide inputs for the UAS.","title":"Transmitter (TX)"},{"location":"hardware/#telemetry-radios","text":"Telemetry radios transmit messages among the UAS to its respective Ground Control Station (GCS) the GCS can receive messages such as attitude, altitude, GPS data, and speed. This is useful when performing outdoor UAS operations where flight data can be read by ground pilots.","title":"Telemetry Radios"},{"location":"px4-gz-docker/","text":"Simulator Running Gazebo Garden with PX4 Autopilot via offboard control commands is set up in our sample repository. The simulator is set up using Docker container and implement a ROS2 and Gazebo Garden bridge for the ROS2 communication protocal to allow ROS2 scripts usage. Repository The PX4 Gazebo Docker Repository contains a run script for installation of most required dependencies required to run offboard control algorithm for quadrotors. The repository requires an Ubuntu operating system with Gazebo Garden installed. Navigate to the respective branch and clone the repository to download and clone the software package. git clone https://github.com/w-sribunma/GZ-PX4-docker -b <branch name> Dependencies ROS2 and Gazebo bridge should be built from source. Please follow the link to navigate to the respective github repository and install the ros_gz package from source. In the GZ-PX4-docker directory, navigate to ./get_src.sh and make make necessary adjustments to any linked repository. Building the simulator In the cloned package, build Docker image docker compose build Accessing the terminal shell for the setup service inside docker container, run the following command in two separate containers to start the container with a shell. ./run_dev.sh docker exec -u user -it px4_gz-px4_gz-1 terminator This action to open up a new terminator shell contained inside a docker container. Split the docker into 3 different panels or tabs. Terminal 1: Navigate to px4 directory using cd px4 Build px4_sitl from the PX4 Autopilot make px4_sitl when running this container shell for the first time. To start the PX4 Gazebo Garden instance, run the PX4 autostart command PX4_SYS_AUTOSTART=4001 PX4_GZ_MODEL=x500_lidar ./build/px4_sitl_default/bin/px4 -i 1 to start the gazebo software with the PX4 X500 model with onboard 360 degrees lidar sensor. Note models can be changed by modifying PX4_GZ_MODEL=<model name> Terminal 2: To run a DDS agent for Gazebo PX4 instance communication with ROS2, run MicroXRCEAgent udp4 -p 8888 Terminal 3: This terminal serves to run any ROS2 packages required for the mission. Navigate to ros2_ws directory cd ros2_ws and build ROS2 workspace colcon build Source ros2 environment source install/setup.bash From the built repository under px4_offboard package, run the desired offboard script with ros2 run px4_offboard [script name] to communicate between simulator and ROS2 environment and use offboard control inputs with PX4 Autopilot.","title":"Simulator"},{"location":"px4-gz-docker/#simulator","text":"Running Gazebo Garden with PX4 Autopilot via offboard control commands is set up in our sample repository. The simulator is set up using Docker container and implement a ROS2 and Gazebo Garden bridge for the ROS2 communication protocal to allow ROS2 scripts usage.","title":"Simulator"},{"location":"px4-gz-docker/#repository","text":"The PX4 Gazebo Docker Repository contains a run script for installation of most required dependencies required to run offboard control algorithm for quadrotors. The repository requires an Ubuntu operating system with Gazebo Garden installed. Navigate to the respective branch and clone the repository to download and clone the software package. git clone https://github.com/w-sribunma/GZ-PX4-docker -b <branch name>","title":"Repository"},{"location":"px4-gz-docker/#dependencies","text":"ROS2 and Gazebo bridge should be built from source. Please follow the link to navigate to the respective github repository and install the ros_gz package from source. In the GZ-PX4-docker directory, navigate to ./get_src.sh and make make necessary adjustments to any linked repository.","title":"Dependencies"},{"location":"px4-gz-docker/#building-the-simulator","text":"In the cloned package, build Docker image docker compose build Accessing the terminal shell for the setup service inside docker container, run the following command in two separate containers to start the container with a shell. ./run_dev.sh docker exec -u user -it px4_gz-px4_gz-1 terminator This action to open up a new terminator shell contained inside a docker container. Split the docker into 3 different panels or tabs. Terminal 1: Navigate to px4 directory using cd px4 Build px4_sitl from the PX4 Autopilot make px4_sitl when running this container shell for the first time. To start the PX4 Gazebo Garden instance, run the PX4 autostart command PX4_SYS_AUTOSTART=4001 PX4_GZ_MODEL=x500_lidar ./build/px4_sitl_default/bin/px4 -i 1 to start the gazebo software with the PX4 X500 model with onboard 360 degrees lidar sensor. Note models can be changed by modifying PX4_GZ_MODEL=<model name> Terminal 2: To run a DDS agent for Gazebo PX4 instance communication with ROS2, run MicroXRCEAgent udp4 -p 8888 Terminal 3: This terminal serves to run any ROS2 packages required for the mission. Navigate to ros2_ws directory cd ros2_ws and build ROS2 workspace colcon build Source ros2 environment source install/setup.bash From the built repository under px4_offboard package, run the desired offboard script with ros2 run px4_offboard [script name] to communicate between simulator and ROS2 environment and use offboard control inputs with PX4 Autopilot.","title":"Building the simulator"},{"location":"resources/","text":"UAS Operation Education Documentation This document serves as a suggestion for UAV Educational Resources an individual should take to get started in research in UAS. This document is laid out in a way we suggest you follow, starting from the prerequisite requirements. The section \u201cMission-specific task\u201d is listed to suggest a few useful tools to tackle specific tasks required for your mission Prerequisites To get started on research involving UAS, we suggest following this path to familiarize yourself with the materials needed for UAS research. We recommend following the courses in this order, depending on the nature of your research. A lot of UAS operations can be done through Python codes under a Linux-based Ubuntu environment. However, C++ language can be used for efficiency and further applications in Robotics. Note that most autopilot source codes are written in C++, which means that any alteration done directly with the autopilot will require sufficient knowledge of the coding language. Therefore, for mission-specific tasks, sufficient knowledge in C++ will be useful for future, more advanced involvements. Python 3 The Constructsim Python 3 Udemy Python3 Linux for Robotics (Optional for early stage) C++ for Robotics Useful Additional Tools Udacity Version Control with Git It is a good practice to have version control repositories when working in a team and documenting each research progress. We suggest individuals know the basics of Git to be able to work collaboratively in a research team. Udemy Docker Docker is a useful environment for setting up containers and images for each environment and can be applied to create a fast, repeatable environment setup. It allows containers to be built, shared, and run on any device. Robot Operating Software Robot Operating Software 2 (ROS2) serves as a set of software libraries and tools for building robot applications, allowing fast, open-source tools to complete any robotic computation, including in applications to UAS operations. The official tutorial page for ROS2 humble can be found here. Please note that your ROS2 version can vary, but we recommend selecting a Long-term support version such as the ROS2 \u201cHumble.\u201d ROS2: (Highly Recommended) ROS2 Basics: Udemy ROS2 for Beginners This course covers all the ROS2 basic knowledge, including the introductions to nodes, topics, services, parameters, etc. This introduces you to writing your first ROS2 code for future use in communicating between UAS and various other components. Udemy ROS2 Applications to Gazebo/RViz This course is recommended to further strengthen the knowledge of ROS2 applications in a simulator environment, introducing you to topics of TF, URDF, RVIZ, and gazebo. All of these are required to work with a simulated model, its orientation and dynamics, and the simulator environment. Other Mission-Specific Tasks Path Planning and Maze Navigation with ROS2 This course is useful to introduce multiple popular and useful algorithms in concepts, including localization, mapping, path planning, and motion planning, all of which are useful for maze application and navigation in applications with computer vision. Udemy ROS2 Path Planning and Maze Solving with Computer Vision NAV2 Stack with Ros2 for basic waypoint planning NAV2 is a library that allows for stable perception, planning, control, localization, and visualization of robotic autonomous systems. This can be applied through ROS sensors and provide an efficient navigation behavior that is worth knowing as a base operation for Waypoint A to Waypoint B autonomous navigation. Udemy ROS2- NAV2 Stack Gazebo Gazebo is a software commonly used for robotics simulations that supports connections to ROS environments. It is very useful to use Gazebo for simulations related to UAS models and software for any preventable bugs or unstable algorithms. Mastering Gazebo Simulator","title":"UAS resources"},{"location":"resources/#uas-operation-education-documentation","text":"This document serves as a suggestion for UAV Educational Resources an individual should take to get started in research in UAS. This document is laid out in a way we suggest you follow, starting from the prerequisite requirements. The section \u201cMission-specific task\u201d is listed to suggest a few useful tools to tackle specific tasks required for your mission","title":"UAS Operation Education Documentation"},{"location":"resources/#prerequisites","text":"To get started on research involving UAS, we suggest following this path to familiarize yourself with the materials needed for UAS research. We recommend following the courses in this order, depending on the nature of your research. A lot of UAS operations can be done through Python codes under a Linux-based Ubuntu environment. However, C++ language can be used for efficiency and further applications in Robotics. Note that most autopilot source codes are written in C++, which means that any alteration done directly with the autopilot will require sufficient knowledge of the coding language. Therefore, for mission-specific tasks, sufficient knowledge in C++ will be useful for future, more advanced involvements. Python 3 The Constructsim Python 3 Udemy Python3 Linux for Robotics (Optional for early stage) C++ for Robotics","title":"Prerequisites"},{"location":"resources/#useful-additional-tools","text":"Udacity Version Control with Git It is a good practice to have version control repositories when working in a team and documenting each research progress. We suggest individuals know the basics of Git to be able to work collaboratively in a research team. Udemy Docker Docker is a useful environment for setting up containers and images for each environment and can be applied to create a fast, repeatable environment setup. It allows containers to be built, shared, and run on any device.","title":"Useful Additional Tools"},{"location":"resources/#robot-operating-software","text":"Robot Operating Software 2 (ROS2) serves as a set of software libraries and tools for building robot applications, allowing fast, open-source tools to complete any robotic computation, including in applications to UAS operations. The official tutorial page for ROS2 humble can be found here. Please note that your ROS2 version can vary, but we recommend selecting a Long-term support version such as the ROS2 \u201cHumble.\u201d ROS2: (Highly Recommended) ROS2 Basics: Udemy ROS2 for Beginners This course covers all the ROS2 basic knowledge, including the introductions to nodes, topics, services, parameters, etc. This introduces you to writing your first ROS2 code for future use in communicating between UAS and various other components. Udemy ROS2 Applications to Gazebo/RViz This course is recommended to further strengthen the knowledge of ROS2 applications in a simulator environment, introducing you to topics of TF, URDF, RVIZ, and gazebo. All of these are required to work with a simulated model, its orientation and dynamics, and the simulator environment.","title":"Robot Operating Software"},{"location":"resources/#other-mission-specific-tasks","text":"Path Planning and Maze Navigation with ROS2 This course is useful to introduce multiple popular and useful algorithms in concepts, including localization, mapping, path planning, and motion planning, all of which are useful for maze application and navigation in applications with computer vision. Udemy ROS2 Path Planning and Maze Solving with Computer Vision NAV2 Stack with Ros2 for basic waypoint planning NAV2 is a library that allows for stable perception, planning, control, localization, and visualization of robotic autonomous systems. This can be applied through ROS sensors and provide an efficient navigation behavior that is worth knowing as a base operation for Waypoint A to Waypoint B autonomous navigation. Udemy ROS2- NAV2 Stack Gazebo Gazebo is a software commonly used for robotics simulations that supports connections to ROS environments. It is very useful to use Gazebo for simulations related to UAS models and software for any preventable bugs or unstable algorithms. Mastering Gazebo Simulator","title":"Other Mission-Specific Tasks"}]}